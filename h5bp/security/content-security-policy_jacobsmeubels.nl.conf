# ----------------------------------------------------------------------
# | Content Security Policy (CSP)                                      |
# ----------------------------------------------------------------------

# Mitigate the risk of cross-site scripting and other content-injection
# attacks.
#
# This can be done by setting a Content Security Policy which permits
# trusted sources of content for your website.
#
# There is no policy that fits all websites, you will have to modify the
# `Content-Security-Policy` directives in the example depending on your needs.

# To make your CSP implementation easier, you can use an online CSP header
# generator such as:
# https://report-uri.com/home/generate/
#
# It is encouraged that you validate your CSP header using a CSP validator
# such as:
# https://csp-evaluator.withgoogle.com

<IfModule mod_headers.c>
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://static.jacobsmeubels.nl https://cdn.jsdelivr.net https://kit.fontawesome.com https://www.gstatic.com https://www.google.com https://maps.google.com https://maps.googleapis.com https://apis.google.com; style-src 'self' 'unsafe-inline' https://static.jacobsmeubels.nl https://ka-f.fontawesome.com https://www.google.com https://fonts.googleapis.com; img-src 'self' data: https://static.jacobsmeubels.nl https://*.gstatic.com https://maps.googleapis.com https://maps.google.com https://*.ytimg.com; font-src 'self' https://static.jacobsmeubels.nl https://fonts.googleapis.com https://fonts.gstatic.com https://ka-f.fontawesome.com; connect-src 'self' https://ka-f.fontawesome.com; object-src 'none'; frame-src 'self' https://www.google.com https://www.youtube.com https://accounts.google.com; worker-src 'self' https://www.google.com https://www.gstatic.com; frame-ancestors 'self'; form-action 'self'; upgrade-insecure-requests; block-all-mixed-content; base-uri 'self'"
</IfModule>
